--1 non_usa_customers.sql: Provide a query showing Customers (just their full names, customer ID and country) who are not in the US.
SELECT FirstName, LastName, CustomerId, Country FROM Customer WHERE Country != "USA";

--2 brazil_customers.sql: Provide a query only showing the Customers from Brazil.
SELECT FirstName, LastName, CustomerId, Country FROM Customer WHERE Country = "Brazil";

--3 brazil_customers_invoices.sql: Provide a query showing the Invoices of customers who are from Brazil. The resultant table should show the customer's full name, Invoice ID, Date of the invoice and billing country.
SELECT cust.FirstName, cust.LastName, inv.InvoiceId, inv.InvoiceDate, inv.BillingCountry
FROM Invoice as inv LEFT JOIN Customer as cust on inv.CustomerId = cust.CustomerId WHERE inv.BillingCountry = "Brazil";

--4 sales_agents.sql: Provide a query showing only the Employees who are Sales Agents.
SELECT * FROM Employee WHERE Title = "Sales Support Agent";

--5 unique_invoice_countries.sql: Provide a query showing a unique/distinct list of billing countries from the Invoice table.
SELECT DISTINCT BillingCountry FROM Invoice;

--6 sales_agent_invoices.sql: Provide a query that shows the invoices associated with each sales agent. The resultant table should include the Sales Agent's full name.
SELECT emp.FirstName, emp.LastName, emp.Title, inv.InvoiceId
FROM Customer as cust LEFT JOIN Invoice as inv ON cust.customerId = inv.customerId
LEFT JOIN Employee as emp ON cust.SupportRepId = emp.EmployeeId WHERE emp.Title = "Sales Support Agent";

--7 invoice_totals.sql: Provide a query that shows the Invoice Total, Customer name, Country and Sale Agent name for all invoices and customers.
SELECT cus.FirstName, cus.LastName, inv.Total, emp.FirstName, emp.LastName, cus.Country
FROM Customer as cus LEFT JOIN Invoice as inv ON cus.customerId = inv.customerId
LEFT JOIN Employee as emp ON cus.SupportRepId = emp.EmployeeId;

--8 total_invoices_{year}.sql: How many Invoices were there in 2009 and 2011?
SELECT COUNT(InvoiceId)
FROM Invoice
WHERE InvoiceDate BETWEEN "2009-01-01 00:00:00" AND "2009-12-31 00:00:00"
OR
InvoiceDate BETWEEN "2011-01-01 00:00:00" AND "2011-12-31 00:00:00";

--9 total_sales_{year}.sql: What are the respective total sales for each of those years?
SELECT SUM(Total)
FROM Invoice
WHERE InvoiceDate GLOB "2009*" OR InvoiceDate GLOB "2011*"
GROUP BY InvoiceDate GLOB "2009*";

--10 invoice_37_line_item_count.sql: Looking at the InvoiceLine table, provide a query that COUNTs the number of line items for Invoice ID 37.
SELECT COUNT(InvoiceID)
FROM InvoiceLine
WHERE InvoiceId = "37";

--11 line_items_per_invoice.sql: Looking at the InvoiceLine table, provide a query that COUNTs the number of line items for each Invoice. HINT: GROUP BY
SELECT InvoiceId, COUNT(InvoiceID) as "Line Items"
FROM InvoiceLine
GROUP BY InvoiceId;

--12 line_item_track.sql: Provide a query that includes the purchased track name with each invoice line item.
SELECT tr.Name, il.InvoiceLineId
FROM InvoiceLine as il LEFT JOIN Track as tr  ON tr.TrackId = il.TrackId

-- 13line_item_track_artist.sql: Provide a query that includes the purchased track name AND artist name with each invoice line item.
SELECT t.Name, t.Composer, i.InvoiceLineId
FROM InvoiceLine i 
JOIN Track t ON i.TrackId = t.TrackId;

--14 country_invoices.sql: Provide a query that shows the # of invoices per country. HINT: GROUP BY
COUNT (InvoiceId)
From Invoice
GROUP BY BillingCountry;

--15 playlists_track_count.sql: Provide a query that shows the total number of tracks in each playlist. The Playlist name should be include on the resulant table.
SELECT p.name, COUNT(pt.TrackId)
From Playlist as p LEFT JOIN PlaylistTrack as pt ON p.PlaylistId = pt.PlaylistId
group by p.PlaylistId

--16 tracks_no_id.sql: Provide a query that shows all the Tracks, but displays no IDs. The result should include the Album name, Media type and Genre.
SELECT t.Name, a.Title, mt.Name, g.Name
FROM Track as t LEFT JOIN Album as a ON t.AlbumId = a.AlbumId
LEFT JOIN MediaType as mt ON t.MediaTypeId = mt.MediaTypeId
LEFT JOIN Genre as g ON t.GenreId = g.GenreId;

--17 invoices_line_item_count.sql: Provide a query that shows all Invoices but includes the # of invoice line items.
SELECT inv.*, il.Quantity
FROM Invoice as inv LEFT JOIN InvoiceLine as il ON inv.InvoiceId = il.InvoiceId

--18 sales_agent_total_sales.sql: Provide a query that shows total sales made by each sales agent.
SELECT emp.Title, Count (cust.SupportRepId)
FROM Customer as cust LEFT JOIN Employee as emp ON cust.SupportRepId = emp.EmployeeId
GROUP BY emp.EmployeeId;

--19 top_2009_agent.sql: Which sales agent made the most in sales in 2009?
--     Hint: Use the MAX function on a subquery.


--20 top_agent.sql: Which sales agent made the most in sales over all?
SELECT Employee.FirstName, Employee.LastName, 
ROUND(SUM(Invoice.Total), 2) as 'Total Sales' 
FROM Employee 
JOIN Customer, Invoice 
WHERE Customer.SupportRepId = Employee.EmployeeId  
AND Employee.Title = 'Sales Support Agent' 
AND Customer.CustomerId = Invoice.CustomerId 
GROUP BY Employee.FirstName 
ORDER BY 'Total Sales' DESC LIMIT 1;

--21 sales_agent_customer_count.sql: Provide a query that shows the count of customers assigned to each sales agent.
SELECT Employee.FirstName, Employee.LastName,
COUNT (CustomerId)
FROM Customer
JOIN Employee
WHERE Employee.EmployeeId = Customer.SupportRepId
GROUP BY Employee.LastName;

--22 sales_per_country.sql: Provide a query that shows the total sales per country.
SELECT Customer.Country,
ROUND(SUM(Invoice.Total), 2) as 'Total Sales'
FROM Invoice
JOIN Customer
WHERE Customer.Country = Invoice.BillingCountry
GROUP BY Customer.Country;

--23 top_country.sql: Which country's customers spent the most?
SELECT Customer.Country, 
ROUND(SUM(Invoice.Total), 2) as 'Total Sales' 
FROM Invoice 
JOIN Customer 
WHERE Customer.Country = Invoice.BillingCountry 
GROUP BY Customer.Country
ORDER BY ROUND(SUM(Invoice.Total), 2) DESC LIMIT 1;

--24 top_2013_track.sql: Provide a query that shows the most purchased track of 2013.


--25 top_5_tracks.sql: Provide a query that shows the top 5 most purchased tracks over all.


--26 top_3_artists.sql: Provide a query that shows the top 3 best selling artists.


--27 top_media_type.sql: Provide a query that shows the most purchased Media Type.

